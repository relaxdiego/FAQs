# 1) Make sure pandoc is installed in your system http://johnmacfarlane.net/pandoc
# 2) Make sure the JSON gem is installed in your system `gem install json_pure`
# 3) Make sure you have a config.yml file setup alongside this script. See config.yml.example for an example
require 'rubygems'
require 'net/http'
require 'json/pure'
require 'yaml'

config = YAML::load( File.open('config.yml') )

faq = {}

print 'Retrieving faqs...'
Net::HTTP.start(config['host']) { |http|
  response = http.get("/projects/#{config['project_id']}/issues.json?&limit=100&status_id=closed&key=#{config['api_key']}")
  json = JSON.parse(response.body)
  faq = json['issues']
  puts "retrieved #{faq.count}/#{json['total_count']}"
  
  target = "tmp/response.txt"
  print "Writing server response to #{target}..."
  open(target, "wb"){ |file| file.write(response.body) }
  puts "done!"
}

categories = faq.map{|q| q['category']}.uniq.sort{|a,b| a['id']<=>b['id']}

raw = "tmp/faq.textile"
print "Writing Textile format to #{raw}..."
open(raw, "wb") do |file|
  categories.each do |category|
    file.write "\n\nh2. #{category['name']}"
    filtered_faq = faq.select{ |q| q['category']['id']==category['id'] }
    filtered_faq.each do |q|
      file.write "\n\nh3. #{q['subject']}"
      file.write "\n\n<div class=\"answer\">#{q['description']}\n\n</div>"
      file.write "\n\n<div class=\"faq-id\">ID: #{q['id']}</div>"
    end
  end
end
puts "done!"

print "Generating final HTML to output/faq.html..."
`pandoc -s -S --toc -c assets/style.css -B fragments/header.html -A fragments/footer.html tmp/faq.textile -o output/faq.html`
text = File.read("output/faq.html")
File.open("output/faq.html", "w"){ |file| file.puts text.gsub('#{timestamp}', "Autogenerated on #{Time.now.inspect}") }
puts "done!"

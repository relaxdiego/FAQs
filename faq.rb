# 1) Make sure pandoc is installed in your system http://johnmacfarlane.net/pandoc
# 2) Make sure the JSON gem is installed in your system `gem install json_pure`
# 3) Make sure you have a config.yml file setup alongside this script. See config.yml.example for an example
# 4) Make sure you have the box-api gem installed
require 'rubygems'
require 'net/http'
require 'json/pure'
require 'yaml'
require 'box-api'
require 'launchy'

config = YAML::load( File.open('config.yml') )

faq = {}

print 'Retrieving faqs...'
Net::HTTP.start(config['redmine_host']) { |http|
  response = http.get("/projects/#{config['redmine_project_id']}/issues.json?&limit=100&status_id=5&key=#{config['redmine_api_key']}")
  json = JSON.parse(response.body)
  faq = json['issues']
  puts "retrieved #{faq.count}/#{json['total_count']}"
  
  target = "tmp/response.txt"
  print "Writing server response to #{target}..."
  open(target, "wb"){ |file| file.write(response.body) }
  puts "done!"
}

categories = faq.map{|q| q['category']}.uniq.sort{|a,b| a['id']<=>b['id']}

`rm output/*.html`

['internal', 'external'].each do |visibility|
  
  batch = faq.select{ |q| q['custom_fields'].detect{ |cf| cf['name'].downcase=='visibility' }['value'].downcase==visibility }
  raw = "tmp/faq-#{visibility.upcase}.textile"
  print "Writing Textile format to #{raw}..."
  open(raw, "wb") do |file|
    categories.each do |category|
      filtered_faq = batch.select{ |q| q['category']['id']==category['id'] }
      next if filtered_faq.length == 0
      file.write "\n\nh2. #{category['name']}"
      filtered_faq.each do |q|
        file.write "\n\nh3. #{q['subject']}"
        file.write "\n\n<div class=\"answer\">#{q['description']}\n\n</div>"
        file.write "\n\n<div class=\"faq-id\">ID: #{q['id']}</div>"
      end
    end
  end

  puts "done!"

  filename = Time.now.strftime("FAQ-#{visibility.upcase}-%Y-%m-%d-%H%M%S%Z.html")
  print "Generating final HTML to output/#{filename}..."
  `pandoc -s -S --toc -B fragments/header-#{visibility.downcase}.html -A fragments/footer.html tmp/faq-#{visibility.upcase}.textile -o output/#{filename}`
  text = File.read("output/#{filename}")
  File.open("output/#{filename}", "w"){ |file| file.puts text.gsub('#{timestamp}', "Autogenerated on #{Time.now.inspect}") }
  puts "done!"

  # This part is copied from the box-api gem's examples

  puts "Authenticating with Box.net..."
    account = Box::Account.new(config['box_api_key'])
    auth_token = config['box_auth_token']
  
    account.authorize(:auth_token => auth_token) do |auth_url|
      Launchy.open(auth_url)
      puts "Press ENTER once you have authorized this application to use your account"
      gets
    end
  
    unless account.authorized?
      puts "Unable to login, please try again."
      exit
    end
  
    puts "Logged in to Box.net as #{ account.login }"
  
    config['box_auth_token'] = account.auth_token
  
    File.open('config.yml', 'w') do |file|
      YAML.dump(config, file)
    end
  
    print "Uploading output/#{filename}..."
    folder = account.folder(config['box_folder_id'])
    folder.upload("output/#{filename}")
    puts "done!"
  
end #visibility